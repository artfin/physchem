}
v <- v[-1]
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, col = counter, lwd = 2)
}
plot.new()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
for (i in 1 : 1000) {
v <- c(v, 1 + 0.01 * i)
}
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
v <- v[-1]
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, pch = 19, col = counter, lwd = 2)
}
plot.new()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
for (i in 1 : 1000) {
v <- c(v, 1 + 0.01 * i)
}
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot.new()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
for (i in 1 : 1000) {
v <- c(v, 0.8 + 0.01 * i)
}
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
require(MESS)
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.00001
for (i in 2 : 50000) {
x <- c(x, b + 0.00001 * i)
}
for (i in 1 : 10000) {
x <- c(x, tail(x, 1) + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 7) {
q[[i]] <- generate_arrays(235 + i * 10)
cat("Generated: ", i, "\n")
}
T_critical <- 100 * (8 * a) / (27 * b * 8.2)
q_crit <- generate_arrays(T_critical)
# Plotting isothermes
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 2 : length(q)) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(q_crit[[1]], q_crit[[2]], type = "l", col = "red", lwd = 2)
# AMAGAT
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 10000) {
p[i] <- i * 0.001
}
B_1 <- 8.314 * Temp / 100
B_2 <- b - (100 * a) / (8.314 * Temp)
B_3 <- (10^4 * (2 * a * b) / (8.314 * Temp)^2 - 10^6 * a^2 / (8.314 * Temp)^3)
pv <- B_1 + B_2 * p + B_3 * p^2
cat(B_1, "\n")
cat(B_2, "\n")
cat(B_3, "\n")
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2, type = "l")
Temp <- 300
R <- 0.082
p <- array()
for (i in 1 : 10000) {
p[i] <- 0.01 * i
}
v <- array()
for (i in 1000 : 10000) {
eq <- function(x) {
res <- x^3 * p[i] - p[i] * x^2 + a * x - a * b - R * Temp * x^2
return(res)
}
uni <- uniroot(eq, c(-5,5))
v <- c(v, uni$root)
}
v <- v[-1]
p <- p[1000:10000]
plot(p, p*v, type = "l", col = "green", lwd = 2)
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
for (i in 1 : 1000) {
v <- c(v, 0.8 + 0.01 * i)
}
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
for (i in 1 : 1000) {
v <- c(v, 0.8 + 0.01 * i)
}
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot()
dev.ew()
dev.new()
dev.new()
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
X11()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
dev.new()
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 180 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 180 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 10000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 180 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 20000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(-10, 50), xlim = c(-100, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 180 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 20000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(-10, 50), xlim = c(-100, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 180 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
plot(p, p*v, type = "l", lwd = 2, ylim = c(-10, 50), xlim = c(-100, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
v <- array()
#  for (i in 1 : 1000) {
#    v <- c(v, 0.8 + 0.01 * i)
#  }
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
}
amagat <- list()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
amagat[[counter]] <- list()
v <- array()
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
amagat[[counter]][[1]] <- p
amagat[[counter]][[2]] <- p*v
}
maxima <- amagat[[1]][[1]][which(diff(sign(diff(amagat[[1]][[1]]))) == -2) + 1]
minima <- amagat[[1]][[1]][which(diff(sign(diff(amagat[[1]][[1]]))) == +2) + 1]
maxima
for (counter in 1 : length(amagat)) {
minima_x <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x, minima_y, pch = 19, col = "skyblue")
}
for (counter in 1 : length(amagat)) {
minima_y <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_x <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x, minima_y, pch = 19, col = "skyblue")
}
amagat <- list()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 50), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 10) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
amagat[[counter]] <- list()
v <- array()
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
amagat[[counter]][[1]] <- p
amagat[[counter]][[2]] <- p*v
}
for (counter in 1 : length(amagat)) {
minima_x <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x, minima_y, pch = 19, col = "skyblue")
}
amagat <- list()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 100), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 15) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
amagat[[counter]] <- list()
v <- array()
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
amagat[[counter]][[1]] <- p
amagat[[counter]][[2]] <- p*v
}
for (counter in 1 : length(amagat)) {
minima_x <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x, minima_y, pch = 19, col = "skyblue")
}
minima_x <- array()
minima_y <- array()
for (counter in 1 : length(amagat)) {
minima_x[counter] <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y[counter] <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x[counter], minima_y[counter], pch = 19, col = "skyblue")
}
func <- splinefun(minima_x, minima_y, method="natural",  ties = mean)
x <- seq(0, 100, by = 0.1)
points(x, func(x), col = "green", type = "l", lwd = 2)
x <- seq(0, 500, by = 0.1)
points(x, func(x), col = "green", type = "l", lwd = 2)
amagat <- list()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 100), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 20) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
amagat[[counter]] <- list()
v <- array()
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
amagat[[counter]][[1]] <- p
amagat[[counter]][[2]] <- p*v
}
minima_x <- array()
minima_y <- array()
for (counter in 1 : length(amagat)) {
minima_x[counter] <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y[counter] <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x[counter], minima_y[counter], pch = 19, col = "skyblue")
}
func <- splinefun(minima_x, minima_y, method="natural",  ties = mean)
x <- seq(0, 400, by = 0.1)
points(x, func(x), col = "green", type = "l", lwd = 2)
amagat <- list()
plot(p, p*v, type = "l", lwd = 2, ylim = c(0, 100), xlim = c(0, 2000))
Temp <- array()
for (s in 1 : 30) {
Temp[s] <- 240 + s * 30
}
for (counter in 1 : length(Temp)) {
amagat[[counter]] <- list()
v <- array()
for (i in 1 : 50000) {
v <- c(v, 0.05 + 0.01 * i)
}
p <- array()
p <- (R * Temp[counter]) / (v - b) - a / (v * v)
points(p, p*v, type = "l", col = counter, lwd = 2)
amagat[[counter]][[1]] <- p
amagat[[counter]][[2]] <- p*v
}
minima_x <- array()
minima_y <- array()
for (counter in 1 : length(amagat)) {
minima_x[counter] <- amagat[[counter]][[1]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
minima_y[counter] <- amagat[[counter]][[2]][which(diff(sign(diff(amagat[[counter]][[2]]))) == +2) + 1]
points(minima_x[counter], minima_y[counter], pch = 19, col = "skyblue")
}
