x <- array()
y <- array()
x[1] <- b + 0.001
for (i in 2 : 5000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 10) {
q[[i]] <- generate_arrays(230 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
horizontal_level <- function(x, y) {
}
?extremum
find_extremum <- function(x, y) {
min <- array(0, dim = 1)
max <- array(0, dim = 1)
for (i in 1 : length(x)) {
if (y[i] > y[i - 1] && y[i] < y[i + 1]) {
max <- c(max, x[i])
}
if (y[i] < y[i - 1] && y[i] < y[i + 1]) {
min <- c(min, x[i])
}
}
min <- min[-1]
max <- max[-1]
res <- list()
res[[1]] <- min
res[[2]] <- max
return(res)
}
s <- find_extremum(q[[1]][[1]], q[[1]][[2]])
find_extremum <- function(x, y) {
min <- array(0, dim = 1)
max <- array(0, dim = 1)
for (i in 2 : (length(x) - 1)) {
if (y[i] > y[i - 1] && y[i] < y[i + 1]) {
max <- c(max, x[i])
}
if (y[i] < y[i - 1] && y[i] < y[i + 1]) {
min <- c(min, x[i])
}
}
min <- min[-1]
max <- max[-1]
res <- list()
res[[1]] <- min
res[[2]] <- max
return(res)
}
s <- find_extremum(q[[1]][[1]], q[[1]][[2]])
s
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
R <- 8.31
c <- array()
n <- array()
for (i in 1 : 100) {
n[i] <- i
c[i] <- (1.5 * n[i] * R - 2.5 * R) / (n[i] - 1)
}
plot(c, n, type = "l")
plot(n, c, type = "l")
for (i in -10 : 100) {
n[i] <- i
c[i] <- (1.5 * n[i] * R - 2.5 * R) / (n[i] - 1)
}
plot(n, c, type = "l")
for (i in (-10) : 100) {
n[i] <- i
c[i] <- (1.5 * n[i] * R - 2.5 * R) / (n[i] - 1)
}
plot(n, c, type = "l")
for (i in 1 : 100) {
n[i] <- i
c[i] <- (1.5 * n[i] * R - 2.5 * R) / (n[i] - 1)
}
plot(n, c, type = "l")
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.001
for (i in 2 : 5000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 10) {
q[[i]] <- generate_arrays(230 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.001
for (i in 2 : 5000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 4) {
q[[i]] <- generate_arrays(230 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 4) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
spinodal <- array()
spinodal <- a * (q[[1]][[1]] - 2 * b) / (q[[1]][[1]]^3)
points(q[[1]][[1]], spindoal, type = "l", col = 5, lwd = 2)
points(q[[1]][[1]], spinodal, type = "l", col = 5, lwd = 2)
points(q[[1]][[1]], spinodal, type = "l", col = 1, lwd = 2)
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.001
for (i in 2 : 5000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 10) {
q[[i]] <- generate_arrays(230 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
spinodal <- array()
spinodal <- a * (q[[1]][[1]] - 2 * b) / (q[[1]][[1]]^3)
points(q[[1]][[1]], spinodal, type = "l", col = 1, lwd = 2)
auc(q[[1]][[1]], q[[1]][[2]], type = 'spline')
require(MESS)
auc(q[[1]][[1]], q[[1]][[2]], type = 'spline')
install.packages("MESS")
require(MESS)
auc(q[[1]][[1]], q[[1]][[2]], type = 'spline')
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.001
for (i in 2 : 5000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 1) {
q[[i]] <- generate_arrays(245 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
spinodal <- array()
spinodal <- a * (q[[1]][[1]] - 2 * b) / (q[[1]][[1]]^3)
points(q[[1]][[1]], spinodal, type = "l", col = 1, lwd = 2)
x <- seq(-3,3,0.01)
y1 <- dnorm(x,0,1)
y2 <- 0.5*dnorm(x,0,1)
plot(x,y1,type="l",bty="L",xlab="X",ylab="dnorm(X)")
points(x,y2,type="l",col="red")
polygon(c(x,rev(x)),c(y2,rev(y1)),col="skyblue")
x <- seq(-3,3,0.01)
y1 <- dnorm(x,0,1)
y2 <- 0.5*dnorm(x,0,1)
plot(x,y1,type="l",bty="L",xlab="X",ylab="dnorm(X)")
points(x,y2,type="l",col="red")
polygon(c(x,rev(x)),c(y2,rev(y1)),col="skyblue")
q <- list()
for (i in 1 : 1) {
q[[i]] <- generate_arrays(245 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
spinodal <- array()
spinodal <- a * (q[[1]][[1]] - 2 * b) / (q[[1]][[1]]^3)
points(q[[1]][[1]], spinodal, type = "l", col = 1, lwd = 2)
which(diff(sign(diff(q[[1]][[2]])))==-2)+1
abline(h = which(diff(sign(diff(q[[1]][[2]])))==-2) + 1, col = "red", lwd = 2)
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
abline(h = which(diff(sign(diff(q[[1]][[2]])))==-2) + 1, col = "red", lwd = 2)
abline(h = p[which(diff(sign(diff(q[[1]][[2]])))==-2) + 1], col = "red", lwd = 2)
abline(h = q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==-2) + 1], col = "red", lwd = 2)
abline(h = q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==+2) + 1], col = "red", lwd = 2)
median <- (maxima + minima) / 2
abline(h = median, col = "green", lwd = 2)
med <- (maxima + minima) / 2
maxima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==-2) + 1]
minima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==+2) + 1]
med <- (maxima + minima) / 2
abline(h = med, col = "green", lwd = 2)
r <- seq(from = 1, to = 1, length = 10)
r
hor_line <- seq(from = med, to = med, length = 10)
x1 <- seq(from = med, to = med, length = 10)
x2 <- q[[1]][[2]]
# Find points where x1 is above x2.
above<- x1>x2
# Points always intersect when above=TRUE, then FALSE or reverse
intersect.points<-which(diff(above)!=0)
# Find the slopes for each line segment.
x1.slopes<-x1[intersect.points+1]-x1[intersect.points]
x2.slopes<-x2[intersect.points+1]-x2[intersect.points]
# Find the intersection for each segment.
x.points<-intersect.points + ((x2[intersect.points] - x1[intersect.points]) / (x1.slopes-x2.slopes))
y.points<-x1[intersect.points] + (x1.slopes*(x.points-intersect.points))
# Plot.
plot(x1,type='l')
lines(x2,type='l',col='red')
points(x.points,y.points,col='blue')
plot(x1,type='l')
lines(x2,type='l',col='red')
x2
lines(x2,type='l',col='red')
plot(x2,type='l',col='red')
plot(q[[1]][[2]], type='l',col='red', xlim = c(0, 10), ylim = c(0, 10))
plot(q[[1]][[1]], q[[1]][[2]], type='l',col='red', xlim = c(0, 10), ylim = c(0, 10))
plot(q[[1]][[1]], q[[1]][[2]], type='l',col='red', xlim = c(0, 5), ylim = c(0, 20))
plot(q[[1]][[1]], q[[1]][[2]], type='l',col='red', xlim = c(0, 5), ylim = c(0, 100))
plot(q[[1]][[1]], q[[1]][[2]], type='l',col='red', xlim = c(0, 5), ylim = c(0, 80), lwd = 2)
lines(x1)
points(x.points,y.points,col='blue')
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
spinodal <- array()
spinodal <- a * (q[[1]][[1]] - 2 * b) / (q[[1]][[1]]^3)
points(q[[1]][[1]], spinodal, type = "l", col = 1, lwd = 2)
maxima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==-2) + 1]
minima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==+2) + 1]
abline(h = maxima, col = "red", lwd = 2)
abline(h = minima, col = "red", lwd = 2)
med <- (maxima + minima) / 2
abline(h = med, col = "green", lwd = 2)
err <- 0.002
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (q[[1]][[2]][i] - med < err) {
interim <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
res[[length(res) + 1]] <- interim
}
err <- 0.002
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (q[[1]][[2]][i] - med < err) {
interim <- array()
interim <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
res[[length(res) + 1]] <- interim
}
err <- 0.002
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (q[[1]][[2]][i] - med < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res
length(res)
err <- 0.001
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (q[[1]][[2]][i] - med < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
length(res)
points(1, 1, col = "red", lwd = 10)
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
maxima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==-2) + 1]
minima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==+2) + 1]
abline(h = maxima, col = "red", lwd = 2)
abline(h = minima, col = "red", lwd = 2)
med <- (maxima + minima) / 2
abline(h = med, col = "green", lwd = 2)
err <- 0.001
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (q[[1]][[2]][i] - med < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
med
q[[1]][[2]][1000]
err <- 0.001
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res
err <- 0.002
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res <- res[[-1]]
err <- 0.002
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
res
err <- 0.005
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
res
err <- 0.01
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
res
err <- 0.1
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
res
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
abline(h = maxima, col = "red", lwd = 2)
abline(h = minima, col = "red", lwd = 2)
med <- (maxima + minima) / 2
abline(h = med, col = "green", lwd = 2)
err <- 0.1
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
err <- 0.2
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
err <- 0.3
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
a <- 3.592
b <- 0.04267
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.0001
for (i in 2 : 10000) {
x <- c(x, b + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 1) {
q[[i]] <- generate_arrays(245 + i * 15)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 1) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
maxima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==-2) + 1]
minima <- q[[1]][[2]][which(diff(sign(diff(q[[1]][[2]])))==+2) + 1]
abline(h = maxima, col = "red", lwd = 2)
abline(h = minima, col = "red", lwd = 2)
med <- (maxima + minima) / 2
abline(h = med, col = "green", lwd = 2)
err <- 0.1
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
res
err <- 0.2
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
err <- 0.3
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[1]][[2]])) {
if (abs(q[[1]][[2]][i] - med) < err) {
res[[length(res) + 1]] <- c(q[[1]][[1]][i], q[[1]][[2]][i])
}
}
res[[1]] <- NULL
for (i in 1 : length(res)) {
points(res[[i]][1], res[[i]][2], col = "blue", lwd = 2)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p",  xlim = c(0, 3), ylim = c(0, 100))
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", ylab = "p", type = "l", xlim = c(0, 3), ylim = c(0, 100))
