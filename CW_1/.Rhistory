}
}
}
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.00001
for (i in 2 : 50000) {
x <- c(x, b + 0.00001 * i)
}
for (i in 1 : 10000) {
x <- c(x, tail(x, 1) + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 15) {
q[[i]] <- generate_arrays(235 + i * 5)
cat("Generated list: ", i, "\n")
}
q <- list()
for (i in 1 : 15) {
q[[i]] <- generate_arrays(235 + i * 5)
cat("Generated: ", i, "\n")
}
# Plotting isothermes
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 15) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
binoidal_points <- list()
binoidal_points_counter <- 1
for (counter in 1 : 15) {
maxima <- q[[counter]][[2]][which(diff(sign(diff(q[[counter]][[2]])))==-2) + 1]
minima <- q[[counter]][[2]][which(diff(sign(diff(q[[counter]][[2]])))==+2) + 1]
if (length(maxima) != 0 && length(minima) != 0 && minima > 0) {
for (s in 1 : 3000) {
# current height
h <- minima + s * (maxima - minima) / 1000
err <- 0.3
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[counter]][[2]])) {
if (abs(q[[counter]][[2]][i] - h) < err) {
res[[length(res) + 1]] <- c(q[[counter]][[1]][i], q[[counter]][[2]][i])
}
}
res[[1]] <- NULL
# deleting all near by dots
for (i in 1 : (length(res) - 1)) {
if (abs(res[[i]][1] - res[[i + 1]][1]) < 0.01) {
res[[i]] <- c(0,0)
}
}
# isolating intersection points
intersection <- list()
k <- 1
for (i in 1 : length(res)) {
if (res[[i]][1] != 0 && res[[i]][2] != 0) {
intersection[[k]] <- c(res[[i]][1], res[[i]][2])
#          points(intersection[[k]][1], intersection[[k]][2], col = "blue", pch = 20)
k <- k + 1
}
}
# finding out the number of intersection point on x-axis
intersection_number <- array()
for (i in 1 : length(intersection)) {
intersection_number[i] <- which(intersection[[i]][1] == q[[counter]][[1]])
}
if (length(intersection_number) > 2) {
# trimming dots representing left and right humps
x_trimmed_left <- q[[counter]][[1]][intersection_number[1] : intersection_number[2]]
y_trimmed_left <- q[[counter]][[2]][intersection_number[1] : intersection_number[2]]
x_trimmed_right <- q[[counter]][[1]][intersection_number[2] : intersection_number[3]]
y_trimmed_right <- q[[counter]][[2]][intersection_number[2] : intersection_number[3]]
# finding humps' surfaces
s_under_left <- auc(x_trimmed_left, y_trimmed_left, type = 'spline')
s_under_right <- auc(x_trimmed_right, y_trimmed_right, type = 'spline')
s_in_left <- q[[counter]][[2]][intersection_number[1]] * (q[[counter]][[1]][intersection_number[2]] -
q[[counter]][[1]][intersection_number[1]]) - s_under_left
s_in_right <- s_under_right - q[[counter]][[2]][intersection_number[2]] * (q[[counter]][[1]][intersection_number[3]] -
q[[counter]][[1]][intersection_number[2]])
cat(s, ":  ", s_in_left - s_in_right, "\n")
if (abs(s_in_left - s_in_right) < 0.05) {
cat("Found it! \n")
abline(h = h, col = counter, lwd = 2)
cat("h: ", h, "\n")
cat("s1: ", s_in_left, "\n")
cat("s2: ", s_in_right, "\n")
# filling binoidal-points-list
binoidal_points[[binoidal_points_counter]] <- c(q[[counter]][[1]][intersection_number[1]],
q[[counter]][[2]][intersection_number[1]])
binoidal_points[[binoidal_points_counter + 1]] <- c(q[[counter]][[1]][intersection_number[3]],
q[[counter]][[2]][intersection_number[3]])
binoidal_points_counter <- binoidal_points_counter + 2
break
}
}
}
} else {
if (length(minima) != 0) {
cat("This is wrong isotherm! \n")
} else {
cat("We are above critical temperature! \n")
}
}
}
binoidal_points <- list()
binoidal_points_counter <- 1
for (counter in 1 : 15) {
maxima <- q[[counter]][[2]][which(diff(sign(diff(q[[counter]][[2]])))==-2) + 1]
minima <- q[[counter]][[2]][which(diff(sign(diff(q[[counter]][[2]])))==+2) + 1]
if (length(maxima) != 0 && length(minima) != 0 && minima > 0) {
for (s in 1 : 3000) {
# current height
h <- minima + s * (maxima - minima) / 1000
err <- 0.3
res <- list()
res[[1]] <- c(0, 0)
for (i in 1 : length(q[[counter]][[2]])) {
if (abs(q[[counter]][[2]][i] - h) < err) {
res[[length(res) + 1]] <- c(q[[counter]][[1]][i], q[[counter]][[2]][i])
}
}
res[[1]] <- NULL
# deleting all near by dots
for (i in 1 : (length(res) - 1)) {
if (abs(res[[i]][1] - res[[i + 1]][1]) < 0.01) {
res[[i]] <- c(0,0)
}
}
# isolating intersection points
intersection <- list()
k <- 1
for (i in 1 : length(res)) {
if (res[[i]][1] != 0 && res[[i]][2] != 0) {
intersection[[k]] <- c(res[[i]][1], res[[i]][2])
#          points(intersection[[k]][1], intersection[[k]][2], col = "blue", pch = 20)
k <- k + 1
}
}
# finding out the number of intersection point on x-axis
intersection_number <- array()
for (i in 1 : length(intersection)) {
intersection_number[i] <- which(intersection[[i]][1] == q[[counter]][[1]])
}
if (length(intersection_number) > 2) {
# trimming dots representing left and right humps
x_trimmed_left <- q[[counter]][[1]][intersection_number[1] : intersection_number[2]]
y_trimmed_left <- q[[counter]][[2]][intersection_number[1] : intersection_number[2]]
x_trimmed_right <- q[[counter]][[1]][intersection_number[2] : intersection_number[3]]
y_trimmed_right <- q[[counter]][[2]][intersection_number[2] : intersection_number[3]]
# finding humps' surfaces
s_under_left <- auc(x_trimmed_left, y_trimmed_left, type = 'spline')
s_under_right <- auc(x_trimmed_right, y_trimmed_right, type = 'spline')
s_in_left <- q[[counter]][[2]][intersection_number[1]] * (q[[counter]][[1]][intersection_number[2]] -
q[[counter]][[1]][intersection_number[1]]) - s_under_left
s_in_right <- s_under_right - q[[counter]][[2]][intersection_number[2]] * (q[[counter]][[1]][intersection_number[3]] -
q[[counter]][[1]][intersection_number[2]])
cat(s, ":  ", s_in_left - s_in_right, "\n")
if (abs(s_in_left - s_in_right) < 0.05) {
cat("Found it! \n")
abline(h = h, col = counter, lwd = 2)
cat("h: ", h, "\n")
cat("s1: ", s_in_left, "\n")
cat("s2: ", s_in_right, "\n")
# filling binoidal-points-list
binoidal_points[[binoidal_points_counter]] <- c(q[[counter]][[1]][intersection_number[1]],
q[[counter]][[2]][intersection_number[1]])
binoidal_points[[binoidal_points_counter + 1]] <- c(q[[counter]][[1]][intersection_number[3]],
q[[counter]][[2]][intersection_number[3]])
binoidal_points_counter <- binoidal_points_counter + 2
break
}
}
}
} else {
if (length(minima) != 0) {
cat("This is wrong isotherm! \n")
} else {
cat("We are above critical temperature! \n")
}
}
}
binoidal_points
plot(binoidal_points)
for (i in 1 : length(binoidal_points)) {
points(binoidal_points[[i]][1], binoidal_points[[i]][2], pch = 20, col = "blue")
}
lines(spline(binoidal_points[[i]][1], binoidal_points[[i]][2]), col = "skyblue", lwd = 1)
for (i in 1 : length(binoidal_points)) {
x <- c(x, binoidal_points[[i]][1])
y <- c(y, binoidal_points[[i]][2])
points(binoidal_points[[i]][1], binoidal_points[[i]][2], pch = 20, col = "blue")
}
x <- array()
y <- array()
for (i in 1 : length(binoidal_points)) {
x <- c(x, binoidal_points[[i]][1])
y <- c(y, binoidal_points[[i]][2])
points(binoidal_points[[i]][1], binoidal_points[[i]][2], pch = 20, col = "blue")
}
x
x <- x[-1]
x
y <- y[-1]
lines(spline(x, y), col = "skyblue", lwd = 1)
points(approx(x, y), col = "red", pch = "*", lwd = 1)
f <- approxfun(x, y, method = "linear", rule = 2, )
curve(f(x), 0, 10, col = "green")
f <- splinefun(x, y)
lines(f. col = "red", lwd = 2)
lines(f, col = "red", lwd = 2)
lines(f(x), col = "red", lwd = 2)
lines(spline(x, y), col = "skyblue", lwd = 1)
f <- splinefun(y, x)
lines(f(x), col = "red", lwd = 2)
lines(spline(x, y, n = 201, method = "natural"), col = 3)
# Plotting isothermes
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 3) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
lines(spline(x, y, n = 201, method = "natural"), col = 3)
lines(spline(x, y, n = 301, method = "natural"), col = 3)
lines(spline(x, y, n = 301, method = "natural"), col = "blue", lwd = 2)
f <- splinefun(x, y, method = "fmm", ties = mean)
lines(f(x), col = "red", lwd = 2)
func <- splinefun(x=x, y=y, method="fmm",  ties = mean)
lines(func(x), xmin = 0, xmax = 3, col = "red", lwd = 2)
lines(func(x), col = "red", lwd = 2)
lines(func, col = "red", lwd = 2)
func <- splinefun(y, x, method="fmm",  ties = mean)
lines(func, col = "red", lwd = 2)
func <- splinefun(x, y, method="fmm",  ties = mean)
lines(func, col = "red", lwd = 2)
func <- splinefun(x, y, method="natural",  ties = mean)
lines(func, col = "red", lwd = 2)
curve(func)
lines(func, col = "red", lwd = 2)
lines(func(x), col = "red", lwd = 2)
x <- seq(0, 1, by = 0.01)
points(x, func(x), pch = 20, col = "red")
points(x, func(x), pch = 20, col = "red", type = "l")
points(x, func(x), col = "red", type = "l")
dev.new(width=5, height=4)
points(x, func(x), col = "red", type = "l")
plot.new()
points(x, func(x), col = "red", type = "l")
plot.new()
points(x, func(x), col = "red", type = "l")
func <- splinefun(x, y, method="natural",  ties = mean)
points(x, func(x), col = "red", type = "l")
binoidal_points$x
for (i in 1 : length(binoidal_points)) {
x <- c(x, binoidal_points[[i]][1])
y <- c(y, binoidal_points[[i]][2])
points(binoidal_points[[i]][1], binoidal_points[[i]][2], pch = 20, col = "blue")
}
x <- x[-1]
y <- y[-1]
func <- splinefun(x, y, method="natural",  ties = mean)
lines(spline(x, y, n = 201, method = "natural"), col = "blue", lwd = 2)
plot(x, func(x)
plot(x, func(x))
plot(x, func(x))
plot(x, func(x), col = "red", type = "l", lwd = 2)
x <- seq(0, 1, by = 0.01)
plot(x, func(x), col = "red", type = "l", lwd = 2)
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 1 : 3) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "red", type = "l")
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 5 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "red", type = "l", lwd = 2)
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
plot(q[[1]][[1]], q[[1]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "green", type = "l", lwd = 2)
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100))
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "green", type = "l", lwd = 2)
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "green", type = "l", lwd = 2)
x <- array()
y <- array()
for (i in 1 : length(binoidal_points)) {
x <- c(x, binoidal_points[[i]][1])
y <- c(y, binoidal_points[[i]][2])
points(binoidal_points[[i]][1], binoidal_points[[i]][2], pch = 20, col = "blue")
}
x <- x[-1]
y <- y[-1]
points(x, y, col = "green", pch = 20)
# Plotting isothermes
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(x, func(x), col = "green", type = "l", lwd = 2)
x <- seq(0, 1, by = 0.01)
points(x, func(x), col = "green", type = "l", lwd = 2)
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 6 : 10) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
x <- seq(0, 1, by = 0.01)
points(x, func(x), col = "green", type = "l", lwd = 2)
T_critical
a <- 3.592
b <- 0.04267
T_critical <- (1/100) * (8 * a) / (27 * b * 8.314)
T_critical
T_critical <-  (8 * a) / (27 * b * 8.314)
T_critical
T_critical <- 100 * (8 * a) / (27 * b * 8.314)
T_critical
q_crit <- generate_arrays(T_critical)
generate_arrays <- function(Temp) {
x <- array()
y <- array()
x[1] <- b + 0.00001
for (i in 2 : 50000) {
x <- c(x, b + 0.00001 * i)
}
for (i in 1 : 10000) {
x <- c(x, tail(x, 1) + 0.001 * i)
}
y <- (0.082 * Temp) / (x - b) - (a / (x * x))
res <- list()
res[[1]] <- x
res[[2]] <- y
return(res)
}
q <- list()
for (i in 1 : 15) {
q[[i]] <- generate_arrays(235 + i * 5)
cat("Generated: ", i, "\n")
}
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 6 : 6) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
T_critical <- 100 * (8 * a) / (27 * b * 8.314)
q_crit <- generate_arrays(T_critical)
points(q_crit[[1]], q_crit[[2]], type = "l", col = "red", lwd = 2)
T_critical <- 100 * (8 * a) / (27 * b * 8.2)
q_crit <- generate_arrays(T_critical)
plot(q[[5]][[1]], q[[5]][[2]], main = "vdW", xlab = "V", type = "l", ylab = "p", xlim = c(0, 3), ylim = c(0, 100), lwd = 2)
for (i in 6 : 6) {
points(q[[i]][[1]], q[[i]][[2]], type = "l", col= i, lwd = 2)
}
points(q_crit[[1]], q_crit[[2]], type = "l", col = "red", lwd = 2)
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 1000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
res <- list()
res[[1]] <- p
res[[2]] <- pv
}
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 1000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
res <- list()
res[[1]] <- p
res[[2]] <- pv
}
q_amagat <- generate_amagat(300)
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2)
q_amagat
q_amagat[[1]]
q_amagat[[2]]
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 1000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
q_amagat
q_amagat[[1]]
q_amagat[[2]]
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2)
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 10000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2)
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 10000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
cat(B_1, "\n")
cat(B_2, "\n")
cat(B_3, "\n")
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 10000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
cat(B_1, "\n")
cat(B_2, "\n")
cat(B_3, "\n")
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2)
generate_amagat <- function(Temp) {
p <- array()
pv <- array()
for (i in 1 : 100000) {
p[i] <- i * 0.001
}
B_1 <- 0.082 * Temp
B_2 <- B_1 * (b / B_1 - a / B_1^2)
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
pv <- B_1 + B_2 * p + B_3 * p^2
cat(B_1, "\n")
cat(B_2, "\n")
cat(B_3, "\n")
res <- list()
res[[1]] <- p
res[[2]] <- pv
return(res)
}
q_amagat <- generate_amagat(300)
plot(q_amagat[[1]], q_amagat[[2]], col = "red", lwd = 2)
B_2 <- b - a / B_1
B_1 <- 0.082 * Temp
Temp <- 300
B_1 <- 0.082 * Temp
B_2 <- b - a / B_1
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
B_2
B_3
B_1 <- 8.314 * Temp
B_2 <- b - a / B_1
B_2
B_3 <- B_1 * ((2 * a * b) / B_1^3 - a^2 / B_1^4)
B_3
